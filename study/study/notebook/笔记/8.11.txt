指针：

		void类型的指针指可进行地址的保存，不可进行指针的解引用
		解引用：指针的+ 或者-
		
		eg:	int a = 10;		char *pc = &a;	char *pc = (char *)&a  [强转为char*]
		
		低地址 低数据：小端	（电脑）	如0X12345678	电脑存放 78 56 34 12
																 低地址-->高地址
		低地址 高数据：大端	（手机)
		
		
数组：
			printf("%p\n",arr);			数组首元素地址				arr类型相当于int *
			printf("%p\n",&arr[0]);		数组首元素地址
			
			printf("%p\n",&arr);				整个数组的地址
			printf("%p\n",&arr+1);			加了整个数组
			
				int （*p)[10] = &arr;  数组指针  （指向数组的指针，长度为10，返回值为int)	int[10]类型的指针；
				int  *arr[3]			指针数组  （arr数组里放int *类型的指针）
				
				eg:
					int a= 10,b=20,c=30;
					int  *arr[3] = {&a,&b,&c};	
					
					打印二维数组：
							*（p[i] + j) //p[i]为数组首地址，+i为第几个元素的地址；
				
			
	
			eg:
			int arr[10] = {1,2,3,4,5,6,7,8,9,10};
			int *p = arr;
			int len = sizeof(arr)/sizeof(arr[0]);
			int i = 0;
			for(i = 0;i<len;i++)
			{
				//printf("%d",*(p+i);	------------相
				printf("%d",p[i];		------------同
			}
			
			*************************
			C语言数组【】相当于地址运算符，等于&
			
		
		int main()
		{
			int arr[5] = {1,2,3,4,5};
			int *p = NULL;		//避免野指针
			for(p = &arr[0];p<&arr[5];)					for(p = &arr[5];p>=&arr[0];)
			{											{
				*p++;	//先*p = 0,再p++					*--p;			//先--p,因为赋值了arr[5],下标应从0-4；
			}											}
		}						

			
		地址比较只能是当前与之后的比较，不能与之前比较；
		
		指针-指针：只有两个指针指向同一块内存有意义;	
		
		确定字符串长度：
					int xx(char *s)
					{
						char *p = s;
						while(*p != 0)
						{
							p++;
						}
						return p-s;
					}
			
			
			
断言:
		assert不是函数，是宏；